from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests

# ЁЯФР ржПржЦрж╛ржирзЗ рждрзЛржорж╛рж░ BotFather ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ ржмржЯ ржЯрзЛржХрзЗржи ржмрж╕рж╛ржУ
BOT_TOKEN = "8167532083:AAEthFJ_iywqADFYut56k0DLzPiuDe2MgR0"

# ЁЯФН ржмрж░рзНрждржорж╛ржи ржжрж╛ржо ржЦрзЛржБржЬрж╛рж░ ржлрж╛ржВрж╢ржи
def get_price(coin):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin}&vs_currencies=usd"
    res = requests.get(url)
    data = res.json()
    return data.get(coin, {}).get('usd', None)

# ЁЯУК ржорж╛рж░рзНржХрзЗржЯ ржЗрждрж┐рж╣рж╛рж╕ (рзн ржжрж┐ржирзЗрж░)
def get_market_chart(coin, days=7):
    url = f"https://api.coingecko.com/api/v3/coins/{coin}/market_chart?vs_currency=usd&days={days}"
    res = requests.get(url)
    data = res.json()
    prices = [p[1] for p in data['prices']]
    return prices

# ЁЯФо ржкрзНрж░рзЗржбрж┐ржХрж╢ржи (Simple Moving Average)
def predict_price(prices):
    return sum(prices) / len(prices)

# ЁЯУМ /price ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def price_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("ржжржпрж╝рж╛ ржХрж░рзЗ ржЯрзЛржХрзЗржирзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржиред ржЙржжрж╛рж╣рж░ржг: /price bitcoin")
        return

    coin = context.args[0].lower()
    price = get_price(coin)

    if price:
        await update.message.reply_text(f"ЁЯТ░ {coin.capitalize()} ржПрж░ ржмрж░рзНрждржорж╛ржи ржжрж╛ржо: ${price}")
    else:
        await update.message.reply_text("тЭМ ржЯрзЛржХрзЗржи ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!")

# ЁЯУМ /predict ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def predict_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("ржжржпрж╝рж╛ ржХрж░рзЗ ржЯрзЛржХрзЗржирзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржиред ржЙржжрж╛рж╣рж░ржг: /predict ethereum")
        return

    coin = context.args[0].lower()
    prices = get_market_chart(coin)

    if prices:
        predicted = predict_price(prices)
        await update.message.reply_text(f"ЁЯФо {coin.capitalize()} ржПрж░ рзн ржжрж┐ржирзЗрж░ ржЧрзЬ ржжрж╛ржо (Simple Prediction): ${predicted:.2f}")
    else:
        await update.message.reply_text("тЭМ ржЯрзЛржХрзЗржирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!")

# ЁЯУМ /start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ЁЯдЦ рж╕рзНржмрж╛ржЧрждржо! ржЖржорж┐ ржПржХржЯрж┐ ржХрзНрж░рж┐ржкрзНржЯрзЛ ржкрзНрж░рж╛ржЗрж╕ ржкрзНрж░рзЗржбрж┐ржХрж╢ржи ржмржЯред\n\n"
        "ЁЯФО /price [coin] тЖТ ржмрж░рзНрждржорж╛ржи ржжрж╛ржо ржжрзЗржЦрзБржи\n"
        "ЁЯФо /predict [coin] тЖТ ржкрзНрж░рзЗржбрж┐ржХрж╢ржи ржжрзЗржЦрзБржи"
    )

# тЦ╢я╕П ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛рж░ ржорзЗржЗржи ржлрж╛ржВрж╢ржи
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("price", price_command))
    app.add_handler(CommandHandler("predict", predict_command))

    print("тЬЕ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
                      main()
